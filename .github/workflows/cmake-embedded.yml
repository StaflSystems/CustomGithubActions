name: CMake Embedded Build

on:
  workflow_call:
    inputs:
      toolchain:
        description: Which toolchain to use
        required: true
        type: string
      build_type:
        description: (Release, Debug, RelWithDebInfo, etc.)
        required: true
        type: string
      build_version_path:
        default: src/main/BuildVersion.h
        type: string
      format-exclude:
        default: ''
        type: string
        
    secrets:
      ACTIONS_SSH_PRIVATE_KEY:
        required: true
        description: private key
      STAFL_CI_PRIVATE_KEY:
        required: true
        description: access token for dependency checking

jobs:
  format:
   runs-on: ubuntu-latest
   steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.13
      with:
        source: '.'
        exclude: ${{ inputs.format-exclude }}
        extensions: 'h,cpp'
        clangFormatVersion: 12
# The next few lines are to run the auto formatter. You should only ever use these on individual repos.
#  I'm just keeping it here to keep track of it.
#         inplace: True
#     - uses: EndBug/add-and-commit@v4
#       with:
#         author_name: Clang Robot
#         author_email: robot@example.com
#         message: 'Committing clang-format changes'
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   check_dependencies:
#     runs-on: ubuntu-latest
#     if: ${{ github.event_name == 'pull_request' }}
#     name: Check Dependencies
#     steps:
#       - name: Check Dependencies
#         uses: StaflSystems/CustomGithubActions/CheckDependencies@main
#         with:
#           STAFL_CI_PRIVATE_KEY: ${{ secrets.STAFL_CI_PRIVATE_KEY }}   
        
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/staflsystems/stafl-devcontainer-ci
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
        
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'
        
    - uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.ACTIONS_SSH_PRIVATE_KEY }}
        
    - name: Determine Version
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/dev')
      id: gitversion
      uses: StaflSystems/CustomGithubActions/ExecuteGitVersion@main
      
    - name: Update BuildVersion.h
      uses: StaflSystems/CustomGithubActions/WriteBuildVersion@main
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/dev')
      with:
        filepath: ${{inputs.build_version_path}}
        major_version: ${{steps.gitversion.outputs.major}}
        minor_version: ${{steps.gitversion.outputs.minor}}
        patch_version: ${{steps.gitversion.outputs.patch}}
        build_version: ${{steps.gitversion.outputs.build}}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{inputs.build_type}} -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ inputs.toolchain }}

    - uses: ammaraskar/gcc-problem-matcher@master
    - name: Build
      # Build your program with the given configuration
      run: cmake --build build --config ${{inputs.build_type}}

    - name: Collect Release Artifacts
      uses: StaflSystems/CustomGithubActions/CollectReleaseArtifacts@main
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/dev')
      with:
        version: ${{steps.gitversion.outputs.major}}.${{steps.gitversion.outputs.minor}}.${{steps.gitversion.outputs.patch}}+${{steps.gitversion.outputs.build}}
        artifacts: "build/bin/**/*.bin,build/bin/**/*.out,build/bin/**/*.elf,docs/**/*,release-artifacts/*"
        destination: "release-artifacts-renamed"
            
    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v5.1
      
    - name: Create a GitHub release
      if: startsWith(github.ref, 'refs/heads/dev')
      uses: ncipollo/release-action@v1
      with:
        artifacts: "release-artifacts-renamed/*"
        tag: ${{steps.gitversion.outputs.major}}.${{steps.gitversion.outputs.minor}}.${{steps.gitversion.outputs.patch}}+${{steps.gitversion.outputs.build}}-${{ steps.branch-name.outputs.current_branch }}
        commit: ${{ github.sha }}
    - name: Create a GitHub release
      if: github.ref == 'refs/heads/main'
      uses: ncipollo/release-action@v1
      with:
        artifacts: "release-artifacts-renamed/*"
        tag: ${{steps.gitversion.outputs.major}}.${{steps.gitversion.outputs.minor}}.${{steps.gitversion.outputs.patch}}+${{steps.gitversion.outputs.build}}

    - name: Delete dev Branch
      if: startsWith(github.ref, 'refs/heads/dev')
      run: |
        git push origin --delete ${{ steps.branch-name.outputs.current_branch }}

name: CMake Embedded Build

on:
  workflow_call:
    inputs:
      toolchain:
        description: Which toolchain to use
        required: true
        type: string
      build_type:
        description: (Release, Debug, RelWithDebInfo, etc.)
        required: true
        type: string
    secrets:
      ACTIONS_SSH_PRIVATE_KEY:
        required: true
        description: private key

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/staflsystems/stafl-devcontainer-ci
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
        
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'
        
    - uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.ACTIONS_SSH_PRIVATE_KEY }}
        
    - name: Determine Version
      if: github.ref == 'refs/heads/main'
      id: gitversion
      uses: StaflSystems/CustomGithubActions/ExecuteGitVersion@main
      
    - name: Update BuildVersion.h
      uses: StaflSystems/CustomGithubActions/WriteBuildVersion@main
      if: github.ref == 'refs/heads/main'
      with:
        major_version: ${{steps.gitversion.outputs.major}}
        minor_version: ${{steps.gitversion.outputs.minor}}
        patch_version: ${{steps.gitversion.outputs.patch}}
        build_version: ${{steps.gitversion.outputs.build}}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{inputs.build_type}} -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ inputs.toolchain }}

    - uses: ammaraskar/gcc-problem-matcher@master
    - name: Build
      # Build your program with the given configuration
      run: cmake --build build --config ${{inputs.build_type}}

    - name: Create a GitHub release
      if: github.ref == 'refs/heads/main'
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build/src/main/*bin"
        tag: ${{steps.gitversion.outputs.major}}.${{steps.gitversion.outputs.minor}}.${{steps.gitversion.outputs.patch}}+${{steps.gitversion.outputs.build}}
